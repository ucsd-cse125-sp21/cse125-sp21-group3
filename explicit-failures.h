#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.7.3081.0.
// 
namespace GameServer {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class _explicit_failures_markupDataTable;
        public : ref class _mark_toolsetDataTable;
        public : ref class libraryDataTable;
        public : ref class _mark_unusableDataTable;
        public : ref class toolsetDataTable;
        public : ref class noteDataTable;
        public : ref class testDataTable;
        public : ref class _mark_failureDataTable;
        public : ref class _mark_expected_failuresDataTable;
        public : ref class _explicit_failures_markupRow;
        public : ref class _mark_toolsetRow;
        public : ref class libraryRow;
        public : ref class _mark_unusableRow;
        public : ref class toolsetRow;
        public : ref class noteRow;
        public : ref class testRow;
        public : ref class _mark_failureRow;
        public : ref class _mark_expected_failuresRow;
        public : ref class _explicit_failures_markupRowChangeEvent;
        public : ref class _mark_toolsetRowChangeEvent;
        public : ref class libraryRowChangeEvent;
        public : ref class _mark_unusableRowChangeEvent;
        public : ref class toolsetRowChangeEvent;
        public : ref class noteRowChangeEvent;
        public : ref class testRowChangeEvent;
        public : ref class _mark_failureRowChangeEvent;
        public : ref class _mark_expected_failuresRowChangeEvent;
        
        private: GameServer::NewDataSet::_explicit_failures_markupDataTable^  table_explicit_failures_markup;
        
        private: GameServer::NewDataSet::_mark_toolsetDataTable^  table_mark_toolset;
        
        private: GameServer::NewDataSet::libraryDataTable^  tablelibrary;
        
        private: GameServer::NewDataSet::_mark_unusableDataTable^  table_mark_unusable;
        
        private: GameServer::NewDataSet::toolsetDataTable^  tabletoolset;
        
        private: GameServer::NewDataSet::noteDataTable^  tablenote;
        
        private: GameServer::NewDataSet::testDataTable^  tabletest;
        
        private: GameServer::NewDataSet::_mark_failureDataTable^  table_mark_failure;
        
        private: GameServer::NewDataSet::_mark_expected_failuresDataTable^  table_mark_expected_failures;
        
        private: ::System::Data::DataRelation^  _relationexplicit_failures_markup_mark_toolset;
        
        private: ::System::Data::DataRelation^  _relationexplicit_failures_markup_library;
        
        private: ::System::Data::DataRelation^  _relationlibrary_mark_unusable;
        
        private: ::System::Data::DataRelation^  _relationmark_unusable_toolset;
        
        private: ::System::Data::DataRelation^  _relationmark_failure_toolset;
        
        private: ::System::Data::DataRelation^  relationtest_toolset;
        
        private: ::System::Data::DataRelation^  _relationmark_expected_failures_toolset;
        
        private: ::System::Data::DataRelation^  _relationmark_unusable_note;
        
        private: ::System::Data::DataRelation^  _relationmark_failure_note;
        
        private: ::System::Data::DataRelation^  relationtest_note;
        
        private: ::System::Data::DataRelation^  _relationmark_expected_failures_note;
        
        private: ::System::Data::DataRelation^  _relationexplicit_failures_markup_note;
        
        private: ::System::Data::DataRelation^  _relationmark_expected_failures_test;
        
        private: ::System::Data::DataRelation^  relationlibrary_test;
        
        private: ::System::Data::DataRelation^  _relationtest_mark_failure;
        
        private: ::System::Data::DataRelation^  _relationlibrary_mark_expected_failures;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void _explicit_failures_markupRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::_explicit_failures_markupRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void _mark_toolsetRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::_mark_toolsetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void libraryRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::libraryRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void _mark_unusableRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::_mark_unusableRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void toolsetRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::toolsetRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void noteRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::noteRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void testRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::testRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void _mark_failureRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::_mark_failureRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void _mark_expected_failuresRowChangeEventHandler(::System::Object^  sender, GameServer::NewDataSet::_mark_expected_failuresRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::_explicit_failures_markupDataTable^  _explicit_failures_markup {
            GameServer::NewDataSet::_explicit_failures_markupDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::_mark_toolsetDataTable^  _mark_toolset {
            GameServer::NewDataSet::_mark_toolsetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::libraryDataTable^  library {
            GameServer::NewDataSet::libraryDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::_mark_unusableDataTable^  _mark_unusable {
            GameServer::NewDataSet::_mark_unusableDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::toolsetDataTable^  toolset {
            GameServer::NewDataSet::toolsetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::noteDataTable^  note {
            GameServer::NewDataSet::noteDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::testDataTable^  test {
            GameServer::NewDataSet::testDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::_mark_failureDataTable^  _mark_failure {
            GameServer::NewDataSet::_mark_failureDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property GameServer::NewDataSet::_mark_expected_failuresDataTable^  _mark_expected_failures {
            GameServer::NewDataSet::_mark_expected_failuresDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerialize_explicit_failures_markup();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerialize_mark_toolset();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializelibrary();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerialize_mark_unusable();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializetoolset();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializenote();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializetest();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerialize_mark_failure();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerialize_mark_expected_failures();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class _explicit_failures_markupDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  column_explicit_failures_markup_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_explicit_failures_markupRowChangeEventHandler^  _explicit_failures_markupRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_explicit_failures_markupRowChangeEventHandler^  _explicit_failures_markupRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_explicit_failures_markupRowChangeEventHandler^  _explicit_failures_markupRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_explicit_failures_markupRowChangeEventHandler^  _explicit_failures_markupRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _explicit_failures_markupDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _explicit_failures_markupDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _explicit_failures_markupDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _explicit_failures_markup_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_explicit_failures_markupRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::_explicit_failures_markupRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Add_explicit_failures_markupRow(GameServer::NewDataSet::_explicit_failures_markupRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_explicit_failures_markupRow^  Add_explicit_failures_markupRow();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_explicit_failures_markupRow^  New_explicit_failures_markupRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Remove_explicit_failures_markupRow(GameServer::NewDataSet::_explicit_failures_markupRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class _mark_toolsetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnstatus;
            
            private: ::System::Data::DataColumn^  columntitle;
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  column_explicit_failures_markup_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_toolsetRowChangeEventHandler^  _mark_toolsetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_toolsetRowChangeEventHandler^  _mark_toolsetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_toolsetRowChangeEventHandler^  _mark_toolsetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_toolsetRowChangeEventHandler^  _mark_toolsetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_toolsetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_toolsetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_toolsetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  statusColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  titleColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _explicit_failures_markup_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_toolsetRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::_mark_toolsetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Add_mark_toolsetRow(GameServer::NewDataSet::_mark_toolsetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_mark_toolsetRow^  Add_mark_toolsetRow(System::String^  name, System::String^  status, 
                        System::String^  title, System::String^  description, GameServer::NewDataSet::_explicit_failures_markupRow^  _parent_explicit_failures_markupRowByexplicit_failures_markup_mark_toolset);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_mark_toolsetRow^  New_mark_toolsetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Remove_mark_toolsetRow(GameServer::NewDataSet::_mark_toolsetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class libraryDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnlibrary_Id;
            
            private: ::System::Data::DataColumn^  column_explicit_failures_markup_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::libraryRowChangeEventHandler^  libraryRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::libraryRowChangeEventHandler^  libraryRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::libraryRowChangeEventHandler^  libraryRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::libraryRowChangeEventHandler^  libraryRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            libraryDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            libraryDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            libraryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  library_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _explicit_failures_markup_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::libraryRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::libraryRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddlibraryRow(GameServer::NewDataSet::libraryRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::libraryRow^  AddlibraryRow(System::String^  name, GameServer::NewDataSet::_explicit_failures_markupRow^  _parent_explicit_failures_markupRowByexplicit_failures_markup_library);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::libraryRow^  NewlibraryRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovelibraryRow(GameServer::NewDataSet::libraryRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class _mark_unusableDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  column_mark_unusable_Id;
            
            private: ::System::Data::DataColumn^  columnlibrary_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_unusableRowChangeEventHandler^  _mark_unusableRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_unusableRowChangeEventHandler^  _mark_unusableRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_unusableRowChangeEventHandler^  _mark_unusableRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_unusableRowChangeEventHandler^  _mark_unusableRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_unusableDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_unusableDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_unusableDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_unusable_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  library_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_unusableRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::_mark_unusableRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Add_mark_unusableRow(GameServer::NewDataSet::_mark_unusableRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_mark_unusableRow^  Add_mark_unusableRow(GameServer::NewDataSet::libraryRow^  _parentlibraryRowBylibrary_mark_unusable);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_mark_unusableRow^  New_mark_unusableRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Remove_mark_unusableRow(GameServer::NewDataSet::_mark_unusableRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class toolsetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  column_mark_unusable_Id;
            
            private: ::System::Data::DataColumn^  column_mark_failure_Id;
            
            private: ::System::Data::DataColumn^  columntest_Id;
            
            private: ::System::Data::DataColumn^  column_mark_expected_failures_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::toolsetRowChangeEventHandler^  toolsetRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::toolsetRowChangeEventHandler^  toolsetRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::toolsetRowChangeEventHandler^  toolsetRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::toolsetRowChangeEventHandler^  toolsetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            toolsetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            toolsetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            toolsetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_unusable_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_failure_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  test_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_expected_failures_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::toolsetRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::toolsetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddtoolsetRow(GameServer::NewDataSet::toolsetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::toolsetRow^  AddtoolsetRow(System::String^  name, GameServer::NewDataSet::_mark_unusableRow^  _parent_mark_unusableRowBymark_unusable_toolset, 
                        GameServer::NewDataSet::_mark_failureRow^  _parent_mark_failureRowBymark_failure_toolset, GameServer::NewDataSet::testRow^  parenttestRowBytest_toolset, 
                        GameServer::NewDataSet::_mark_expected_failuresRow^  _parent_mark_expected_failuresRowBymark_expected_failures_toolset);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::toolsetRow^  NewtoolsetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovetoolsetRow(GameServer::NewDataSet::toolsetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class noteDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnrefid;
            
            private: ::System::Data::DataColumn^  columnauthor;
            
            private: ::System::Data::DataColumn^  columndate;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  column_mark_unusable_Id;
            
            private: ::System::Data::DataColumn^  column_mark_failure_Id;
            
            private: ::System::Data::DataColumn^  columntest_Id;
            
            private: ::System::Data::DataColumn^  column_mark_expected_failures_Id;
            
            private: ::System::Data::DataColumn^  column_explicit_failures_markup_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::noteRowChangeEventHandler^  noteRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::noteRowChangeEventHandler^  noteRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::noteRowChangeEventHandler^  noteRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::noteRowChangeEventHandler^  noteRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            noteDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            noteDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            noteDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  refidColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  authorColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  dateColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_unusable_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_failure_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  test_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_expected_failures_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _explicit_failures_markup_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::noteRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::noteRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddnoteRow(GameServer::NewDataSet::noteRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::noteRow^  AddnoteRow(
                        System::String^  refid, 
                        System::String^  author, 
                        System::String^  date, 
                        System::String^  id, 
                        GameServer::NewDataSet::_mark_unusableRow^  _parent_mark_unusableRowBymark_unusable_note, 
                        GameServer::NewDataSet::_mark_failureRow^  _parent_mark_failureRowBymark_failure_note, 
                        GameServer::NewDataSet::testRow^  parenttestRowBytest_note, 
                        GameServer::NewDataSet::_mark_expected_failuresRow^  _parent_mark_expected_failuresRowBymark_expected_failures_note, 
                        GameServer::NewDataSet::_explicit_failures_markupRow^  _parent_explicit_failures_markupRowByexplicit_failures_markup_note);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::noteRow^  NewnoteRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovenoteRow(GameServer::NewDataSet::noteRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class testDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columncategory;
            
            private: ::System::Data::DataColumn^  columntest_Id;
            
            private: ::System::Data::DataColumn^  column_mark_expected_failures_Id;
            
            private: ::System::Data::DataColumn^  columnlibrary_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::testRowChangeEventHandler^  testRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::testRowChangeEventHandler^  testRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::testRowChangeEventHandler^  testRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::testRowChangeEventHandler^  testRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            testDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            testDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            testDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  categoryColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  test_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_expected_failures_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  library_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::testRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::testRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddtestRow(GameServer::NewDataSet::testRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::testRow^  AddtestRow(System::String^  name, System::String^  category, GameServer::NewDataSet::_mark_expected_failuresRow^  _parent_mark_expected_failuresRowBymark_expected_failures_test, 
                        GameServer::NewDataSet::libraryRow^  parentlibraryRowBylibrary_test);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::testRow^  NewtestRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovetestRow(GameServer::NewDataSet::testRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class _mark_failureDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  column_mark_failure_Id;
            
            private: ::System::Data::DataColumn^  columntest_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_failureRowChangeEventHandler^  _mark_failureRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_failureRowChangeEventHandler^  _mark_failureRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_failureRowChangeEventHandler^  _mark_failureRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_failureRowChangeEventHandler^  _mark_failureRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_failureDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_failureDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_failureDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_failure_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  test_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_failureRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::_mark_failureRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Add_mark_failureRow(GameServer::NewDataSet::_mark_failureRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_mark_failureRow^  Add_mark_failureRow(GameServer::NewDataSet::testRow^  _parenttestRowBytest_mark_failure);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_mark_failureRow^  New_mark_failureRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Remove_mark_failureRow(GameServer::NewDataSet::_mark_failureRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class _mark_expected_failuresDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnreason;
            
            private: ::System::Data::DataColumn^  column_mark_expected_failures_Id;
            
            private: ::System::Data::DataColumn^  columnlibrary_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_expected_failuresRowChangeEventHandler^  _mark_expected_failuresRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_expected_failuresRowChangeEventHandler^  _mark_expected_failuresRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_expected_failuresRowChangeEventHandler^  _mark_expected_failuresRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event GameServer::NewDataSet::_mark_expected_failuresRowChangeEventHandler^  _mark_expected_failuresRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_expected_failuresDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_expected_failuresDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_expected_failuresDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  reasonColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _mark_expected_failures_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  library_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_expected_failuresRow^  default [::System::Int32 ] {
                GameServer::NewDataSet::_mark_expected_failuresRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Add_mark_expected_failuresRow(GameServer::NewDataSet::_mark_expected_failuresRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_mark_expected_failuresRow^  Add_mark_expected_failuresRow(System::String^  reason, GameServer::NewDataSet::libraryRow^  _parentlibraryRowBylibrary_mark_expected_failures);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GameServer::NewDataSet::_mark_expected_failuresRow^  New_mark_expected_failuresRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Remove_mark_expected_failuresRow(GameServer::NewDataSet::_mark_expected_failuresRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class _explicit_failures_markupRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::_explicit_failures_markupDataTable^  table_explicit_failures_markup;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _explicit_failures_markupRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _explicit_failures_markup_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::_mark_toolsetRow^  >^  _Getmark_toolsetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::libraryRow^  >^  GetlibraryRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::noteRow^  >^  GetnoteRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class _mark_toolsetRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::_mark_toolsetDataTable^  table_mark_toolset;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_toolsetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  status {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  title {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _explicit_failures_markup_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_explicit_failures_markupRow^  _explicit_failures_markupRow {
                GameServer::NewDataSet::_explicit_failures_markupRow^  get();
                System::Void set(GameServer::NewDataSet::_explicit_failures_markupRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IstitleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SettitleNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_explicit_failures_markup_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_explicit_failures_markup_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class libraryRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::libraryDataTable^  tablelibrary;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            libraryRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 library_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _explicit_failures_markup_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_explicit_failures_markupRow^  _explicit_failures_markupRow {
                GameServer::NewDataSet::_explicit_failures_markupRow^  get();
                System::Void set(GameServer::NewDataSet::_explicit_failures_markupRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_explicit_failures_markup_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_explicit_failures_markup_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::_mark_unusableRow^  >^  _Getmark_unusableRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::testRow^  >^  GettestRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::_mark_expected_failuresRow^  >^  _Getmark_expected_failuresRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class _mark_unusableRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::_mark_unusableDataTable^  table_mark_unusable;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_unusableRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_unusable_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 library_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::libraryRow^  libraryRow {
                GameServer::NewDataSet::libraryRow^  get();
                System::Void set(GameServer::NewDataSet::libraryRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Islibrary_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setlibrary_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::toolsetRow^  >^  GettoolsetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::noteRow^  >^  GetnoteRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class toolsetRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::toolsetDataTable^  tabletoolset;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            toolsetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_unusable_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_failure_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 test_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_expected_failures_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_unusableRow^  _mark_unusableRow {
                GameServer::NewDataSet::_mark_unusableRow^  get();
                System::Void set(GameServer::NewDataSet::_mark_unusableRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_failureRow^  _mark_failureRow {
                GameServer::NewDataSet::_mark_failureRow^  get();
                System::Void set(GameServer::NewDataSet::_mark_failureRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::testRow^  testRow {
                GameServer::NewDataSet::testRow^  get();
                System::Void set(GameServer::NewDataSet::testRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_expected_failuresRow^  _mark_expected_failuresRow {
                GameServer::NewDataSet::_mark_expected_failuresRow^  get();
                System::Void set(GameServer::NewDataSet::_mark_expected_failuresRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_mark_unusable_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_mark_unusable_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_mark_failure_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_mark_failure_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Istest_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Settest_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_mark_expected_failures_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_mark_expected_failures_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class noteRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::noteDataTable^  tablenote;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            noteRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  refid {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  author {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  date {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_unusable_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_failure_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 test_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_expected_failures_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _explicit_failures_markup_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_unusableRow^  _mark_unusableRow {
                GameServer::NewDataSet::_mark_unusableRow^  get();
                System::Void set(GameServer::NewDataSet::_mark_unusableRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_failureRow^  _mark_failureRow {
                GameServer::NewDataSet::_mark_failureRow^  get();
                System::Void set(GameServer::NewDataSet::_mark_failureRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::testRow^  testRow {
                GameServer::NewDataSet::testRow^  get();
                System::Void set(GameServer::NewDataSet::testRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_expected_failuresRow^  _mark_expected_failuresRow {
                GameServer::NewDataSet::_mark_expected_failuresRow^  get();
                System::Void set(GameServer::NewDataSet::_mark_expected_failuresRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_explicit_failures_markupRow^  _explicit_failures_markupRow {
                GameServer::NewDataSet::_explicit_failures_markupRow^  get();
                System::Void set(GameServer::NewDataSet::_explicit_failures_markupRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsrefidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetrefidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsauthorNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetauthorNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsdateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetdateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetidNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_mark_unusable_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_mark_unusable_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_mark_failure_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_mark_failure_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Istest_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Settest_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_mark_expected_failures_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_mark_expected_failures_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_explicit_failures_markup_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_explicit_failures_markup_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class testRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::testDataTable^  tabletest;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            testRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  category {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 test_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_expected_failures_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 library_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_expected_failuresRow^  _mark_expected_failuresRow {
                GameServer::NewDataSet::_mark_expected_failuresRow^  get();
                System::Void set(GameServer::NewDataSet::_mark_expected_failuresRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::libraryRow^  libraryRow {
                GameServer::NewDataSet::libraryRow^  get();
                System::Void set(GameServer::NewDataSet::libraryRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IscategoryNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetcategoryNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_mark_expected_failures_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_mark_expected_failures_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Islibrary_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setlibrary_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::_mark_failureRow^  >^  _Getmark_failureRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::toolsetRow^  >^  GettoolsetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::noteRow^  >^  GetnoteRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class _mark_failureRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::_mark_failureDataTable^  table_mark_failure;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_failureRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_failure_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 test_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::testRow^  testRow {
                GameServer::NewDataSet::testRow^  get();
                System::Void set(GameServer::NewDataSet::testRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Istest_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Settest_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::toolsetRow^  >^  GettoolsetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::noteRow^  >^  GetnoteRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class _mark_expected_failuresRow : public ::System::Data::DataRow {
            
            private: GameServer::NewDataSet::_mark_expected_failuresDataTable^  table_mark_expected_failures;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_expected_failuresRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  reason {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _mark_expected_failures_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 library_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::libraryRow^  libraryRow {
                GameServer::NewDataSet::libraryRow^  get();
                System::Void set(GameServer::NewDataSet::libraryRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsreasonNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetreasonNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Islibrary_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setlibrary_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::testRow^  >^  GettestRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::toolsetRow^  >^  GettoolsetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< GameServer::NewDataSet::noteRow^  >^  GetnoteRows();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class _explicit_failures_markupRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::_explicit_failures_markupRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _explicit_failures_markupRowChangeEvent(GameServer::NewDataSet::_explicit_failures_markupRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_explicit_failures_markupRow^  Row {
                GameServer::NewDataSet::_explicit_failures_markupRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class _mark_toolsetRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::_mark_toolsetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_toolsetRowChangeEvent(GameServer::NewDataSet::_mark_toolsetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_toolsetRow^  Row {
                GameServer::NewDataSet::_mark_toolsetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class libraryRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::libraryRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            libraryRowChangeEvent(GameServer::NewDataSet::libraryRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::libraryRow^  Row {
                GameServer::NewDataSet::libraryRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class _mark_unusableRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::_mark_unusableRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_unusableRowChangeEvent(GameServer::NewDataSet::_mark_unusableRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_unusableRow^  Row {
                GameServer::NewDataSet::_mark_unusableRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class toolsetRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::toolsetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            toolsetRowChangeEvent(GameServer::NewDataSet::toolsetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::toolsetRow^  Row {
                GameServer::NewDataSet::toolsetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class noteRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::noteRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            noteRowChangeEvent(GameServer::NewDataSet::noteRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::noteRow^  Row {
                GameServer::NewDataSet::noteRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class testRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::testRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            testRowChangeEvent(GameServer::NewDataSet::testRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::testRow^  Row {
                GameServer::NewDataSet::testRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class _mark_failureRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::_mark_failureRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_failureRowChangeEvent(GameServer::NewDataSet::_mark_failureRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_failureRow^  Row {
                GameServer::NewDataSet::_mark_failureRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class _mark_expected_failuresRowChangeEvent : public ::System::EventArgs {
            
            private: GameServer::NewDataSet::_mark_expected_failuresRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _mark_expected_failuresRowChangeEvent(GameServer::NewDataSet::_mark_expected_failuresRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property GameServer::NewDataSet::_mark_expected_failuresRow^  Row {
                GameServer::NewDataSet::_mark_expected_failuresRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace GameServer {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &GameServer::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &GameServer::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"explicit-failures-markup"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_explicit_failures_markupDataTable(ds->Tables[L"explicit-failures-markup"])));
            }
            if (ds->Tables[L"mark-toolset"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_mark_toolsetDataTable(ds->Tables[L"mark-toolset"])));
            }
            if (ds->Tables[L"library"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::libraryDataTable(ds->Tables[L"library"])));
            }
            if (ds->Tables[L"mark-unusable"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_mark_unusableDataTable(ds->Tables[L"mark-unusable"])));
            }
            if (ds->Tables[L"toolset"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::toolsetDataTable(ds->Tables[L"toolset"])));
            }
            if (ds->Tables[L"note"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::noteDataTable(ds->Tables[L"note"])));
            }
            if (ds->Tables[L"test"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::testDataTable(ds->Tables[L"test"])));
            }
            if (ds->Tables[L"mark-failure"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_mark_failureDataTable(ds->Tables[L"mark-failure"])));
            }
            if (ds->Tables[L"mark-expected-failures"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_mark_expected_failuresDataTable(ds->Tables[L"mark-expected-failures"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &GameServer::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline GameServer::NewDataSet::_explicit_failures_markupDataTable^  NewDataSet::_explicit_failures_markup::get() {
        return this->table_explicit_failures_markup;
    }
    
    inline GameServer::NewDataSet::_mark_toolsetDataTable^  NewDataSet::_mark_toolset::get() {
        return this->table_mark_toolset;
    }
    
    inline GameServer::NewDataSet::libraryDataTable^  NewDataSet::library::get() {
        return this->tablelibrary;
    }
    
    inline GameServer::NewDataSet::_mark_unusableDataTable^  NewDataSet::_mark_unusable::get() {
        return this->table_mark_unusable;
    }
    
    inline GameServer::NewDataSet::toolsetDataTable^  NewDataSet::toolset::get() {
        return this->tabletoolset;
    }
    
    inline GameServer::NewDataSet::noteDataTable^  NewDataSet::note::get() {
        return this->tablenote;
    }
    
    inline GameServer::NewDataSet::testDataTable^  NewDataSet::test::get() {
        return this->tabletest;
    }
    
    inline GameServer::NewDataSet::_mark_failureDataTable^  NewDataSet::_mark_failure::get() {
        return this->table_mark_failure;
    }
    
    inline GameServer::NewDataSet::_mark_expected_failuresDataTable^  NewDataSet::_mark_expected_failures::get() {
        return this->table_mark_expected_failures;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        GameServer::NewDataSet^  cln = (cli::safe_cast<GameServer::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"explicit-failures-markup"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_explicit_failures_markupDataTable(ds->Tables[L"explicit-failures-markup"])));
            }
            if (ds->Tables[L"mark-toolset"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_mark_toolsetDataTable(ds->Tables[L"mark-toolset"])));
            }
            if (ds->Tables[L"library"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::libraryDataTable(ds->Tables[L"library"])));
            }
            if (ds->Tables[L"mark-unusable"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_mark_unusableDataTable(ds->Tables[L"mark-unusable"])));
            }
            if (ds->Tables[L"toolset"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::toolsetDataTable(ds->Tables[L"toolset"])));
            }
            if (ds->Tables[L"note"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::noteDataTable(ds->Tables[L"note"])));
            }
            if (ds->Tables[L"test"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::testDataTable(ds->Tables[L"test"])));
            }
            if (ds->Tables[L"mark-failure"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_mark_failureDataTable(ds->Tables[L"mark-failure"])));
            }
            if (ds->Tables[L"mark-expected-failures"] != nullptr) {
                __super::Tables->Add((gcnew GameServer::NewDataSet::_mark_expected_failuresDataTable(ds->Tables[L"mark-expected-failures"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->table_explicit_failures_markup = (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupDataTable^  >(__super::Tables[L"explicit-failures-markup"]));
        if (initTable == true) {
            if (this->table_explicit_failures_markup != nullptr) {
                this->table_explicit_failures_markup->InitVars();
            }
        }
        this->table_mark_toolset = (cli::safe_cast<GameServer::NewDataSet::_mark_toolsetDataTable^  >(__super::Tables[L"mark-toolset"]));
        if (initTable == true) {
            if (this->table_mark_toolset != nullptr) {
                this->table_mark_toolset->InitVars();
            }
        }
        this->tablelibrary = (cli::safe_cast<GameServer::NewDataSet::libraryDataTable^  >(__super::Tables[L"library"]));
        if (initTable == true) {
            if (this->tablelibrary != nullptr) {
                this->tablelibrary->InitVars();
            }
        }
        this->table_mark_unusable = (cli::safe_cast<GameServer::NewDataSet::_mark_unusableDataTable^  >(__super::Tables[L"mark-unusable"]));
        if (initTable == true) {
            if (this->table_mark_unusable != nullptr) {
                this->table_mark_unusable->InitVars();
            }
        }
        this->tabletoolset = (cli::safe_cast<GameServer::NewDataSet::toolsetDataTable^  >(__super::Tables[L"toolset"]));
        if (initTable == true) {
            if (this->tabletoolset != nullptr) {
                this->tabletoolset->InitVars();
            }
        }
        this->tablenote = (cli::safe_cast<GameServer::NewDataSet::noteDataTable^  >(__super::Tables[L"note"]));
        if (initTable == true) {
            if (this->tablenote != nullptr) {
                this->tablenote->InitVars();
            }
        }
        this->tabletest = (cli::safe_cast<GameServer::NewDataSet::testDataTable^  >(__super::Tables[L"test"]));
        if (initTable == true) {
            if (this->tabletest != nullptr) {
                this->tabletest->InitVars();
            }
        }
        this->table_mark_failure = (cli::safe_cast<GameServer::NewDataSet::_mark_failureDataTable^  >(__super::Tables[L"mark-failure"]));
        if (initTable == true) {
            if (this->table_mark_failure != nullptr) {
                this->table_mark_failure->InitVars();
            }
        }
        this->table_mark_expected_failures = (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresDataTable^  >(__super::Tables[L"mark-expected-failures"]));
        if (initTable == true) {
            if (this->table_mark_expected_failures != nullptr) {
                this->table_mark_expected_failures->InitVars();
            }
        }
        this->_relationexplicit_failures_markup_mark_toolset = this->Relations[L"explicit-failures-markup_mark-toolset"];
        this->_relationexplicit_failures_markup_library = this->Relations[L"explicit-failures-markup_library"];
        this->_relationlibrary_mark_unusable = this->Relations[L"library_mark-unusable"];
        this->_relationmark_unusable_toolset = this->Relations[L"mark-unusable_toolset"];
        this->_relationmark_failure_toolset = this->Relations[L"mark-failure_toolset"];
        this->relationtest_toolset = this->Relations[L"test_toolset"];
        this->_relationmark_expected_failures_toolset = this->Relations[L"mark-expected-failures_toolset"];
        this->_relationmark_unusable_note = this->Relations[L"mark-unusable_note"];
        this->_relationmark_failure_note = this->Relations[L"mark-failure_note"];
        this->relationtest_note = this->Relations[L"test_note"];
        this->_relationmark_expected_failures_note = this->Relations[L"mark-expected-failures_note"];
        this->_relationexplicit_failures_markup_note = this->Relations[L"explicit-failures-markup_note"];
        this->_relationmark_expected_failures_test = this->Relations[L"mark-expected-failures_test"];
        this->relationlibrary_test = this->Relations[L"library_test"];
        this->_relationtest_mark_failure = this->Relations[L"test_mark-failure"];
        this->_relationlibrary_mark_expected_failures = this->Relations[L"library_mark-expected-failures"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->table_explicit_failures_markup = (gcnew GameServer::NewDataSet::_explicit_failures_markupDataTable());
        __super::Tables->Add(this->table_explicit_failures_markup);
        this->table_mark_toolset = (gcnew GameServer::NewDataSet::_mark_toolsetDataTable());
        __super::Tables->Add(this->table_mark_toolset);
        this->tablelibrary = (gcnew GameServer::NewDataSet::libraryDataTable());
        __super::Tables->Add(this->tablelibrary);
        this->table_mark_unusable = (gcnew GameServer::NewDataSet::_mark_unusableDataTable());
        __super::Tables->Add(this->table_mark_unusable);
        this->tabletoolset = (gcnew GameServer::NewDataSet::toolsetDataTable());
        __super::Tables->Add(this->tabletoolset);
        this->tablenote = (gcnew GameServer::NewDataSet::noteDataTable());
        __super::Tables->Add(this->tablenote);
        this->tabletest = (gcnew GameServer::NewDataSet::testDataTable());
        __super::Tables->Add(this->tabletest);
        this->table_mark_failure = (gcnew GameServer::NewDataSet::_mark_failureDataTable());
        __super::Tables->Add(this->table_mark_failure);
        this->table_mark_expected_failures = (gcnew GameServer::NewDataSet::_mark_expected_failuresDataTable());
        __super::Tables->Add(this->table_mark_expected_failures);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"explicit-failures-markup_mark-toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_explicit_failures_markup->_explicit_failures_markup_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_toolset->_explicit_failures_markup_IdColumn}));
        this->table_mark_toolset->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"explicit-failures-markup_library", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_explicit_failures_markup->_explicit_failures_markup_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->_explicit_failures_markup_IdColumn}));
        this->tablelibrary->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"library_mark-unusable", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->library_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_unusable->library_IdColumn}));
        this->table_mark_unusable->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"mark-unusable_toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_unusable->_mark_unusable_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletoolset->_mark_unusable_IdColumn}));
        this->tabletoolset->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"mark-failure_toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_failure->_mark_failure_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletoolset->_mark_failure_IdColumn}));
        this->tabletoolset->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"test_toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->test_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletoolset->test_IdColumn}));
        this->tabletoolset->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"mark-expected-failures_toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_expected_failures->_mark_expected_failures_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletoolset->_mark_expected_failures_IdColumn}));
        this->tabletoolset->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"mark-unusable_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_unusable->_mark_unusable_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->_mark_unusable_IdColumn}));
        this->tablenote->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"mark-failure_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_failure->_mark_failure_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->_mark_failure_IdColumn}));
        this->tablenote->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"test_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->test_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->test_IdColumn}));
        this->tablenote->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"mark-expected-failures_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_expected_failures->_mark_expected_failures_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->_mark_expected_failures_IdColumn}));
        this->tablenote->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"explicit-failures-markup_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_explicit_failures_markup->_explicit_failures_markup_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->_explicit_failures_markup_IdColumn}));
        this->tablenote->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"mark-expected-failures_test", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_expected_failures->_mark_expected_failures_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->_mark_expected_failures_IdColumn}));
        this->tabletest->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"library_test", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->library_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->library_IdColumn}));
        this->tabletest->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"test_mark-failure", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->test_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_failure->test_IdColumn}));
        this->table_mark_failure->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"library_mark-expected-failures", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->library_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_expected_failures->library_IdColumn}));
        this->table_mark_expected_failures->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->_relationexplicit_failures_markup_mark_toolset = (gcnew ::System::Data::DataRelation(L"explicit-failures-markup_mark-toolset", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_explicit_failures_markup->_explicit_failures_markup_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_toolset->_explicit_failures_markup_IdColumn}, false));
        this->_relationexplicit_failures_markup_mark_toolset->Nested = true;
        this->Relations->Add(this->_relationexplicit_failures_markup_mark_toolset);
        this->_relationexplicit_failures_markup_library = (gcnew ::System::Data::DataRelation(L"explicit-failures-markup_library", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_explicit_failures_markup->_explicit_failures_markup_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->_explicit_failures_markup_IdColumn}, false));
        this->_relationexplicit_failures_markup_library->Nested = true;
        this->Relations->Add(this->_relationexplicit_failures_markup_library);
        this->_relationlibrary_mark_unusable = (gcnew ::System::Data::DataRelation(L"library_mark-unusable", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->library_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_unusable->library_IdColumn}, false));
        this->_relationlibrary_mark_unusable->Nested = true;
        this->Relations->Add(this->_relationlibrary_mark_unusable);
        this->_relationmark_unusable_toolset = (gcnew ::System::Data::DataRelation(L"mark-unusable_toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_unusable->_mark_unusable_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletoolset->_mark_unusable_IdColumn}, false));
        this->_relationmark_unusable_toolset->Nested = true;
        this->Relations->Add(this->_relationmark_unusable_toolset);
        this->_relationmark_failure_toolset = (gcnew ::System::Data::DataRelation(L"mark-failure_toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_failure->_mark_failure_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletoolset->_mark_failure_IdColumn}, false));
        this->_relationmark_failure_toolset->Nested = true;
        this->Relations->Add(this->_relationmark_failure_toolset);
        this->relationtest_toolset = (gcnew ::System::Data::DataRelation(L"test_toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->test_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletoolset->test_IdColumn}, false));
        this->relationtest_toolset->Nested = true;
        this->Relations->Add(this->relationtest_toolset);
        this->_relationmark_expected_failures_toolset = (gcnew ::System::Data::DataRelation(L"mark-expected-failures_toolset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_expected_failures->_mark_expected_failures_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletoolset->_mark_expected_failures_IdColumn}, false));
        this->_relationmark_expected_failures_toolset->Nested = true;
        this->Relations->Add(this->_relationmark_expected_failures_toolset);
        this->_relationmark_unusable_note = (gcnew ::System::Data::DataRelation(L"mark-unusable_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_unusable->_mark_unusable_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->_mark_unusable_IdColumn}, false));
        this->_relationmark_unusable_note->Nested = true;
        this->Relations->Add(this->_relationmark_unusable_note);
        this->_relationmark_failure_note = (gcnew ::System::Data::DataRelation(L"mark-failure_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_failure->_mark_failure_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->_mark_failure_IdColumn}, false));
        this->_relationmark_failure_note->Nested = true;
        this->Relations->Add(this->_relationmark_failure_note);
        this->relationtest_note = (gcnew ::System::Data::DataRelation(L"test_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->test_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->test_IdColumn}, false));
        this->relationtest_note->Nested = true;
        this->Relations->Add(this->relationtest_note);
        this->_relationmark_expected_failures_note = (gcnew ::System::Data::DataRelation(L"mark-expected-failures_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_expected_failures->_mark_expected_failures_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->_mark_expected_failures_IdColumn}, false));
        this->_relationmark_expected_failures_note->Nested = true;
        this->Relations->Add(this->_relationmark_expected_failures_note);
        this->_relationexplicit_failures_markup_note = (gcnew ::System::Data::DataRelation(L"explicit-failures-markup_note", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_explicit_failures_markup->_explicit_failures_markup_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablenote->_explicit_failures_markup_IdColumn}, false));
        this->_relationexplicit_failures_markup_note->Nested = true;
        this->Relations->Add(this->_relationexplicit_failures_markup_note);
        this->_relationmark_expected_failures_test = (gcnew ::System::Data::DataRelation(L"mark-expected-failures_test", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_expected_failures->_mark_expected_failures_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->_mark_expected_failures_IdColumn}, false));
        this->_relationmark_expected_failures_test->Nested = true;
        this->Relations->Add(this->_relationmark_expected_failures_test);
        this->relationlibrary_test = (gcnew ::System::Data::DataRelation(L"library_test", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->library_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->library_IdColumn}, false));
        this->relationlibrary_test->Nested = true;
        this->Relations->Add(this->relationlibrary_test);
        this->_relationtest_mark_failure = (gcnew ::System::Data::DataRelation(L"test_mark-failure", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletest->test_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_failure->test_IdColumn}, false));
        this->_relationtest_mark_failure->Nested = true;
        this->Relations->Add(this->_relationtest_mark_failure);
        this->_relationlibrary_mark_expected_failures = (gcnew ::System::Data::DataRelation(L"library_mark-expected-failures", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->library_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_mark_expected_failures->library_IdColumn}, false));
        this->_relationlibrary_mark_expected_failures->Nested = true;
        this->Relations->Add(this->_relationlibrary_mark_expected_failures);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerialize_explicit_failures_markup() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerialize_mark_toolset() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializelibrary() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerialize_mark_unusable() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializetoolset() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializenote() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializetest() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerialize_mark_failure() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerialize_mark_expected_failures() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_explicit_failures_markupDataTable::_explicit_failures_markupDataTable() {
        this->TableName = L"explicit-failures-markup";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::_explicit_failures_markupDataTable::_explicit_failures_markupDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::_explicit_failures_markupDataTable::_explicit_failures_markupDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_explicit_failures_markupDataTable::_explicit_failures_markup_IdColumn::get() {
        return this->column_explicit_failures_markup_Id;
    }
    
    inline ::System::Int32 NewDataSet::_explicit_failures_markupDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::_explicit_failures_markupRow^  NewDataSet::_explicit_failures_markupDataTable::default::get(
                ::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::_explicit_failures_markupDataTable::Add_explicit_failures_markupRow(GameServer::NewDataSet::_explicit_failures_markupRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::_explicit_failures_markupRow^  NewDataSet::_explicit_failures_markupDataTable::Add_explicit_failures_markupRow() {
        GameServer::NewDataSet::_explicit_failures_markupRow^  row_explicit_failures_markupRow = (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
        row_explicit_failures_markupRow->ItemArray = columnValuesArray;
        this->Rows->Add(row_explicit_failures_markupRow);
        return row_explicit_failures_markupRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::_explicit_failures_markupDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_explicit_failures_markupDataTable::Clone() {
        GameServer::NewDataSet::_explicit_failures_markupDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_explicit_failures_markupDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::_explicit_failures_markupDataTable());
    }
    
    inline ::System::Void NewDataSet::_explicit_failures_markupDataTable::InitVars() {
        this->column_explicit_failures_markup_Id = __super::Columns[L"explicit-failures-markup_Id"];
    }
    
    inline ::System::Void NewDataSet::_explicit_failures_markupDataTable::InitClass() {
        this->column_explicit_failures_markup_Id = (gcnew ::System::Data::DataColumn(L"explicit-failures-markup_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_explicit_failures_markup_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_explicit_failures_markup_Id}, 
                true)));
        this->column_explicit_failures_markup_Id->AutoIncrement = true;
        this->column_explicit_failures_markup_Id->AllowDBNull = false;
        this->column_explicit_failures_markup_Id->Unique = true;
    }
    
    inline GameServer::NewDataSet::_explicit_failures_markupRow^  NewDataSet::_explicit_failures_markupDataTable::New_explicit_failures_markupRow() {
        return (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::_explicit_failures_markupDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::_explicit_failures_markupRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::_explicit_failures_markupDataTable::GetRowType() {
        return GameServer::NewDataSet::_explicit_failures_markupRow::typeid;
    }
    
    inline ::System::Void NewDataSet::_explicit_failures_markupDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->_explicit_failures_markupRowChanged(this, (gcnew GameServer::NewDataSet::_explicit_failures_markupRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_explicit_failures_markupDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->_explicit_failures_markupRowChanging(this, (gcnew GameServer::NewDataSet::_explicit_failures_markupRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_explicit_failures_markupDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->_explicit_failures_markupRowDeleted(this, (gcnew GameServer::NewDataSet::_explicit_failures_markupRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_explicit_failures_markupDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->_explicit_failures_markupRowDeleting(this, (gcnew GameServer::NewDataSet::_explicit_failures_markupRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_explicit_failures_markupDataTable::Remove_explicit_failures_markupRow(GameServer::NewDataSet::_explicit_failures_markupRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_explicit_failures_markupDataTable::GetTypedTableSchema(
                ::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"_explicit_failures_markupDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_mark_toolsetDataTable::_mark_toolsetDataTable() {
        this->TableName = L"mark-toolset";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::_mark_toolsetDataTable::_mark_toolsetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::_mark_toolsetDataTable::_mark_toolsetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_toolsetDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_toolsetDataTable::statusColumn::get() {
        return this->columnstatus;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_toolsetDataTable::titleColumn::get() {
        return this->columntitle;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_toolsetDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_toolsetDataTable::_explicit_failures_markup_IdColumn::get() {
        return this->column_explicit_failures_markup_Id;
    }
    
    inline ::System::Int32 NewDataSet::_mark_toolsetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::_mark_toolsetRow^  NewDataSet::_mark_toolsetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_toolsetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetDataTable::Add_mark_toolsetRow(GameServer::NewDataSet::_mark_toolsetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::_mark_toolsetRow^  NewDataSet::_mark_toolsetDataTable::Add_mark_toolsetRow(System::String^  name, 
                System::String^  status, System::String^  title, System::String^  description, GameServer::NewDataSet::_explicit_failures_markupRow^  _parent_explicit_failures_markupRowByexplicit_failures_markup_mark_toolset) {
        GameServer::NewDataSet::_mark_toolsetRow^  row_mark_toolsetRow = (cli::safe_cast<GameServer::NewDataSet::_mark_toolsetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {name, status, title, 
            description, nullptr};
        if (_parent_explicit_failures_markupRowByexplicit_failures_markup_mark_toolset != nullptr) {
            columnValuesArray[4] = _parent_explicit_failures_markupRowByexplicit_failures_markup_mark_toolset[0];
        }
        row_mark_toolsetRow->ItemArray = columnValuesArray;
        this->Rows->Add(row_mark_toolsetRow);
        return row_mark_toolsetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::_mark_toolsetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_mark_toolsetDataTable::Clone() {
        GameServer::NewDataSet::_mark_toolsetDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::_mark_toolsetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_mark_toolsetDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::_mark_toolsetDataTable());
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnstatus = __super::Columns[L"status"];
        this->columntitle = __super::Columns[L"title"];
        this->columndescription = __super::Columns[L"description"];
        this->column_explicit_failures_markup_Id = __super::Columns[L"explicit-failures-markup_Id"];
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnstatus = (gcnew ::System::Data::DataColumn(L"status", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnstatus);
        this->columntitle = (gcnew ::System::Data::DataColumn(L"title", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columntitle);
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columndescription);
        this->column_explicit_failures_markup_Id = (gcnew ::System::Data::DataColumn(L"explicit-failures-markup_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_explicit_failures_markup_Id);
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnstatus->AllowDBNull = false;
        this->columnstatus->Namespace = L"";
    }
    
    inline GameServer::NewDataSet::_mark_toolsetRow^  NewDataSet::_mark_toolsetDataTable::New_mark_toolsetRow() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_toolsetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::_mark_toolsetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::_mark_toolsetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::_mark_toolsetDataTable::GetRowType() {
        return GameServer::NewDataSet::_mark_toolsetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->_mark_toolsetRowChanged(this, (gcnew GameServer::NewDataSet::_mark_toolsetRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_toolsetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->_mark_toolsetRowChanging(this, (gcnew GameServer::NewDataSet::_mark_toolsetRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_toolsetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->_mark_toolsetRowDeleted(this, (gcnew GameServer::NewDataSet::_mark_toolsetRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_toolsetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->_mark_toolsetRowDeleting(this, (gcnew GameServer::NewDataSet::_mark_toolsetRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_toolsetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetDataTable::Remove_mark_toolsetRow(GameServer::NewDataSet::_mark_toolsetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_mark_toolsetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"_mark_toolsetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::libraryDataTable::libraryDataTable() {
        this->TableName = L"library";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::libraryDataTable::libraryDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::libraryDataTable::libraryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::libraryDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::libraryDataTable::library_IdColumn::get() {
        return this->columnlibrary_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::libraryDataTable::_explicit_failures_markup_IdColumn::get() {
        return this->column_explicit_failures_markup_Id;
    }
    
    inline ::System::Int32 NewDataSet::libraryDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::libraryRow^  NewDataSet::libraryDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::AddlibraryRow(GameServer::NewDataSet::libraryRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::libraryRow^  NewDataSet::libraryDataTable::AddlibraryRow(System::String^  name, GameServer::NewDataSet::_explicit_failures_markupRow^  _parent_explicit_failures_markupRowByexplicit_failures_markup_library) {
        GameServer::NewDataSet::libraryRow^  rowlibraryRow = (cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, nullptr, nullptr};
        if (_parent_explicit_failures_markupRowByexplicit_failures_markup_library != nullptr) {
            columnValuesArray[2] = _parent_explicit_failures_markupRowByexplicit_failures_markup_library[0];
        }
        rowlibraryRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowlibraryRow);
        return rowlibraryRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::libraryDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::libraryDataTable::Clone() {
        GameServer::NewDataSet::libraryDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::libraryDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::libraryDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::libraryDataTable());
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnlibrary_Id = __super::Columns[L"library_Id"];
        this->column_explicit_failures_markup_Id = __super::Columns[L"explicit-failures-markup_Id"];
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnlibrary_Id = (gcnew ::System::Data::DataColumn(L"library_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlibrary_Id);
        this->column_explicit_failures_markup_Id = (gcnew ::System::Data::DataColumn(L"explicit-failures-markup_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_explicit_failures_markup_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnlibrary_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnlibrary_Id->AutoIncrement = true;
        this->columnlibrary_Id->AllowDBNull = false;
        this->columnlibrary_Id->Unique = true;
    }
    
    inline GameServer::NewDataSet::libraryRow^  NewDataSet::libraryDataTable::NewlibraryRow() {
        return (cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::libraryDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::libraryRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::libraryDataTable::GetRowType() {
        return GameServer::NewDataSet::libraryRow::typeid;
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->libraryRowChanged(this, (gcnew GameServer::NewDataSet::libraryRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->libraryRowChanging(this, (gcnew GameServer::NewDataSet::libraryRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->libraryRowDeleted(this, (gcnew GameServer::NewDataSet::libraryRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->libraryRowDeleting(this, (gcnew GameServer::NewDataSet::libraryRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::RemovelibraryRow(GameServer::NewDataSet::libraryRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::libraryDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"libraryDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_mark_unusableDataTable::_mark_unusableDataTable() {
        this->TableName = L"mark-unusable";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::_mark_unusableDataTable::_mark_unusableDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::_mark_unusableDataTable::_mark_unusableDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_unusableDataTable::_mark_unusable_IdColumn::get() {
        return this->column_mark_unusable_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_unusableDataTable::library_IdColumn::get() {
        return this->columnlibrary_Id;
    }
    
    inline ::System::Int32 NewDataSet::_mark_unusableDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::_mark_unusableRow^  NewDataSet::_mark_unusableDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::_mark_unusableDataTable::Add_mark_unusableRow(GameServer::NewDataSet::_mark_unusableRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::_mark_unusableRow^  NewDataSet::_mark_unusableDataTable::Add_mark_unusableRow(GameServer::NewDataSet::libraryRow^  _parentlibraryRowBylibrary_mark_unusable) {
        GameServer::NewDataSet::_mark_unusableRow^  row_mark_unusableRow = (cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (_parentlibraryRowBylibrary_mark_unusable != nullptr) {
            columnValuesArray[1] = _parentlibraryRowBylibrary_mark_unusable[1];
        }
        row_mark_unusableRow->ItemArray = columnValuesArray;
        this->Rows->Add(row_mark_unusableRow);
        return row_mark_unusableRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::_mark_unusableDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_mark_unusableDataTable::Clone() {
        GameServer::NewDataSet::_mark_unusableDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::_mark_unusableDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_mark_unusableDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::_mark_unusableDataTable());
    }
    
    inline ::System::Void NewDataSet::_mark_unusableDataTable::InitVars() {
        this->column_mark_unusable_Id = __super::Columns[L"mark-unusable_Id"];
        this->columnlibrary_Id = __super::Columns[L"library_Id"];
    }
    
    inline ::System::Void NewDataSet::_mark_unusableDataTable::InitClass() {
        this->column_mark_unusable_Id = (gcnew ::System::Data::DataColumn(L"mark-unusable_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_unusable_Id);
        this->columnlibrary_Id = (gcnew ::System::Data::DataColumn(L"library_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlibrary_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_mark_unusable_Id}, 
                true)));
        this->column_mark_unusable_Id->AutoIncrement = true;
        this->column_mark_unusable_Id->AllowDBNull = false;
        this->column_mark_unusable_Id->Unique = true;
    }
    
    inline GameServer::NewDataSet::_mark_unusableRow^  NewDataSet::_mark_unusableDataTable::New_mark_unusableRow() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::_mark_unusableDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::_mark_unusableRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::_mark_unusableDataTable::GetRowType() {
        return GameServer::NewDataSet::_mark_unusableRow::typeid;
    }
    
    inline ::System::Void NewDataSet::_mark_unusableDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->_mark_unusableRowChanged(this, (gcnew GameServer::NewDataSet::_mark_unusableRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_unusableDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->_mark_unusableRowChanging(this, (gcnew GameServer::NewDataSet::_mark_unusableRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_unusableDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->_mark_unusableRowDeleted(this, (gcnew GameServer::NewDataSet::_mark_unusableRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_unusableDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->_mark_unusableRowDeleting(this, (gcnew GameServer::NewDataSet::_mark_unusableRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_unusableDataTable::Remove_mark_unusableRow(GameServer::NewDataSet::_mark_unusableRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_mark_unusableDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"_mark_unusableDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::toolsetDataTable::toolsetDataTable() {
        this->TableName = L"toolset";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::toolsetDataTable::toolsetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::toolsetDataTable::toolsetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::toolsetDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::toolsetDataTable::_mark_unusable_IdColumn::get() {
        return this->column_mark_unusable_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::toolsetDataTable::_mark_failure_IdColumn::get() {
        return this->column_mark_failure_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::toolsetDataTable::test_IdColumn::get() {
        return this->columntest_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::toolsetDataTable::_mark_expected_failures_IdColumn::get() {
        return this->column_mark_expected_failures_Id;
    }
    
    inline ::System::Int32 NewDataSet::toolsetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::toolsetRow^  NewDataSet::toolsetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::toolsetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::toolsetDataTable::AddtoolsetRow(GameServer::NewDataSet::toolsetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::toolsetRow^  NewDataSet::toolsetDataTable::AddtoolsetRow(System::String^  name, GameServer::NewDataSet::_mark_unusableRow^  _parent_mark_unusableRowBymark_unusable_toolset, 
                GameServer::NewDataSet::_mark_failureRow^  _parent_mark_failureRowBymark_failure_toolset, GameServer::NewDataSet::testRow^  parenttestRowBytest_toolset, 
                GameServer::NewDataSet::_mark_expected_failuresRow^  _parent_mark_expected_failuresRowBymark_expected_failures_toolset) {
        GameServer::NewDataSet::toolsetRow^  rowtoolsetRow = (cli::safe_cast<GameServer::NewDataSet::toolsetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {name, nullptr, nullptr, 
            nullptr, nullptr};
        if (_parent_mark_unusableRowBymark_unusable_toolset != nullptr) {
            columnValuesArray[1] = _parent_mark_unusableRowBymark_unusable_toolset[0];
        }
        if (_parent_mark_failureRowBymark_failure_toolset != nullptr) {
            columnValuesArray[2] = _parent_mark_failureRowBymark_failure_toolset[0];
        }
        if (parenttestRowBytest_toolset != nullptr) {
            columnValuesArray[3] = parenttestRowBytest_toolset[2];
        }
        if (_parent_mark_expected_failuresRowBymark_expected_failures_toolset != nullptr) {
            columnValuesArray[4] = _parent_mark_expected_failuresRowBymark_expected_failures_toolset[1];
        }
        rowtoolsetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowtoolsetRow);
        return rowtoolsetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::toolsetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::toolsetDataTable::Clone() {
        GameServer::NewDataSet::toolsetDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::toolsetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::toolsetDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::toolsetDataTable());
    }
    
    inline ::System::Void NewDataSet::toolsetDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->column_mark_unusable_Id = __super::Columns[L"mark-unusable_Id"];
        this->column_mark_failure_Id = __super::Columns[L"mark-failure_Id"];
        this->columntest_Id = __super::Columns[L"test_Id"];
        this->column_mark_expected_failures_Id = __super::Columns[L"mark-expected-failures_Id"];
    }
    
    inline ::System::Void NewDataSet::toolsetDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->column_mark_unusable_Id = (gcnew ::System::Data::DataColumn(L"mark-unusable_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_unusable_Id);
        this->column_mark_failure_Id = (gcnew ::System::Data::DataColumn(L"mark-failure_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_failure_Id);
        this->columntest_Id = (gcnew ::System::Data::DataColumn(L"test_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntest_Id);
        this->column_mark_expected_failures_Id = (gcnew ::System::Data::DataColumn(L"mark-expected-failures_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_expected_failures_Id);
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
    }
    
    inline GameServer::NewDataSet::toolsetRow^  NewDataSet::toolsetDataTable::NewtoolsetRow() {
        return (cli::safe_cast<GameServer::NewDataSet::toolsetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::toolsetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::toolsetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::toolsetDataTable::GetRowType() {
        return GameServer::NewDataSet::toolsetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::toolsetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->toolsetRowChanged(this, (gcnew GameServer::NewDataSet::toolsetRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::toolsetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::toolsetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->toolsetRowChanging(this, (gcnew GameServer::NewDataSet::toolsetRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::toolsetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::toolsetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->toolsetRowDeleted(this, (gcnew GameServer::NewDataSet::toolsetRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::toolsetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::toolsetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->toolsetRowDeleting(this, (gcnew GameServer::NewDataSet::toolsetRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::toolsetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::toolsetDataTable::RemovetoolsetRow(GameServer::NewDataSet::toolsetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::toolsetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"toolsetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::noteDataTable::noteDataTable() {
        this->TableName = L"note";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::noteDataTable::noteDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::noteDataTable::noteDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::refidColumn::get() {
        return this->columnrefid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::authorColumn::get() {
        return this->columnauthor;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::dateColumn::get() {
        return this->columndate;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::_mark_unusable_IdColumn::get() {
        return this->column_mark_unusable_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::_mark_failure_IdColumn::get() {
        return this->column_mark_failure_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::test_IdColumn::get() {
        return this->columntest_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::_mark_expected_failures_IdColumn::get() {
        return this->column_mark_expected_failures_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::noteDataTable::_explicit_failures_markup_IdColumn::get() {
        return this->column_explicit_failures_markup_Id;
    }
    
    inline ::System::Int32 NewDataSet::noteDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::noteRow^  NewDataSet::noteDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::noteRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::noteDataTable::AddnoteRow(GameServer::NewDataSet::noteRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::noteRow^  NewDataSet::noteDataTable::AddnoteRow(
                System::String^  refid, 
                System::String^  author, 
                System::String^  date, 
                System::String^  id, 
                GameServer::NewDataSet::_mark_unusableRow^  _parent_mark_unusableRowBymark_unusable_note, 
                GameServer::NewDataSet::_mark_failureRow^  _parent_mark_failureRowBymark_failure_note, 
                GameServer::NewDataSet::testRow^  parenttestRowBytest_note, 
                GameServer::NewDataSet::_mark_expected_failuresRow^  _parent_mark_expected_failuresRowBymark_expected_failures_note, 
                GameServer::NewDataSet::_explicit_failures_markupRow^  _parent_explicit_failures_markupRowByexplicit_failures_markup_note) {
        GameServer::NewDataSet::noteRow^  rownoteRow = (cli::safe_cast<GameServer::NewDataSet::noteRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(9) {refid, author, date, 
            id, nullptr, nullptr, nullptr, nullptr, nullptr};
        if (_parent_mark_unusableRowBymark_unusable_note != nullptr) {
            columnValuesArray[4] = _parent_mark_unusableRowBymark_unusable_note[0];
        }
        if (_parent_mark_failureRowBymark_failure_note != nullptr) {
            columnValuesArray[5] = _parent_mark_failureRowBymark_failure_note[0];
        }
        if (parenttestRowBytest_note != nullptr) {
            columnValuesArray[6] = parenttestRowBytest_note[2];
        }
        if (_parent_mark_expected_failuresRowBymark_expected_failures_note != nullptr) {
            columnValuesArray[7] = _parent_mark_expected_failuresRowBymark_expected_failures_note[1];
        }
        if (_parent_explicit_failures_markupRowByexplicit_failures_markup_note != nullptr) {
            columnValuesArray[8] = _parent_explicit_failures_markupRowByexplicit_failures_markup_note[0];
        }
        rownoteRow->ItemArray = columnValuesArray;
        this->Rows->Add(rownoteRow);
        return rownoteRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::noteDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::noteDataTable::Clone() {
        GameServer::NewDataSet::noteDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::noteDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::noteDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::noteDataTable());
    }
    
    inline ::System::Void NewDataSet::noteDataTable::InitVars() {
        this->columnrefid = __super::Columns[L"refid"];
        this->columnauthor = __super::Columns[L"author"];
        this->columndate = __super::Columns[L"date"];
        this->columnid = __super::Columns[L"id"];
        this->column_mark_unusable_Id = __super::Columns[L"mark-unusable_Id"];
        this->column_mark_failure_Id = __super::Columns[L"mark-failure_Id"];
        this->columntest_Id = __super::Columns[L"test_Id"];
        this->column_mark_expected_failures_Id = __super::Columns[L"mark-expected-failures_Id"];
        this->column_explicit_failures_markup_Id = __super::Columns[L"explicit-failures-markup_Id"];
    }
    
    inline ::System::Void NewDataSet::noteDataTable::InitClass() {
        this->columnrefid = (gcnew ::System::Data::DataColumn(L"refid", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrefid);
        this->columnauthor = (gcnew ::System::Data::DataColumn(L"author", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnauthor);
        this->columndate = (gcnew ::System::Data::DataColumn(L"date", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndate);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->column_mark_unusable_Id = (gcnew ::System::Data::DataColumn(L"mark-unusable_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_unusable_Id);
        this->column_mark_failure_Id = (gcnew ::System::Data::DataColumn(L"mark-failure_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_failure_Id);
        this->columntest_Id = (gcnew ::System::Data::DataColumn(L"test_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntest_Id);
        this->column_mark_expected_failures_Id = (gcnew ::System::Data::DataColumn(L"mark-expected-failures_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_expected_failures_Id);
        this->column_explicit_failures_markup_Id = (gcnew ::System::Data::DataColumn(L"explicit-failures-markup_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_explicit_failures_markup_Id);
        this->columnrefid->Namespace = L"";
        this->columnauthor->Namespace = L"";
        this->columndate->Namespace = L"";
        this->columnid->Namespace = L"";
    }
    
    inline GameServer::NewDataSet::noteRow^  NewDataSet::noteDataTable::NewnoteRow() {
        return (cli::safe_cast<GameServer::NewDataSet::noteRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::noteDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::noteRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::noteDataTable::GetRowType() {
        return GameServer::NewDataSet::noteRow::typeid;
    }
    
    inline ::System::Void NewDataSet::noteDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->noteRowChanged(this, (gcnew GameServer::NewDataSet::noteRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::noteRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::noteDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->noteRowChanging(this, (gcnew GameServer::NewDataSet::noteRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::noteRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::noteDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->noteRowDeleted(this, (gcnew GameServer::NewDataSet::noteRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::noteRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::noteDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->noteRowDeleting(this, (gcnew GameServer::NewDataSet::noteRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::noteRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::noteDataTable::RemovenoteRow(GameServer::NewDataSet::noteRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::noteDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"noteDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::testDataTable::testDataTable() {
        this->TableName = L"test";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::testDataTable::testDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::testDataTable::testDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::testDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::testDataTable::categoryColumn::get() {
        return this->columncategory;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::testDataTable::test_IdColumn::get() {
        return this->columntest_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::testDataTable::_mark_expected_failures_IdColumn::get() {
        return this->column_mark_expected_failures_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::testDataTable::library_IdColumn::get() {
        return this->columnlibrary_Id;
    }
    
    inline ::System::Int32 NewDataSet::testDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::testRow^  NewDataSet::testDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::testRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::testDataTable::AddtestRow(GameServer::NewDataSet::testRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::testRow^  NewDataSet::testDataTable::AddtestRow(System::String^  name, System::String^  category, 
                GameServer::NewDataSet::_mark_expected_failuresRow^  _parent_mark_expected_failuresRowBymark_expected_failures_test, 
                GameServer::NewDataSet::libraryRow^  parentlibraryRowBylibrary_test) {
        GameServer::NewDataSet::testRow^  rowtestRow = (cli::safe_cast<GameServer::NewDataSet::testRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {name, category, nullptr, 
            nullptr, nullptr};
        if (_parent_mark_expected_failuresRowBymark_expected_failures_test != nullptr) {
            columnValuesArray[3] = _parent_mark_expected_failuresRowBymark_expected_failures_test[1];
        }
        if (parentlibraryRowBylibrary_test != nullptr) {
            columnValuesArray[4] = parentlibraryRowBylibrary_test[1];
        }
        rowtestRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowtestRow);
        return rowtestRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::testDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::testDataTable::Clone() {
        GameServer::NewDataSet::testDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::testDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::testDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::testDataTable());
    }
    
    inline ::System::Void NewDataSet::testDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columncategory = __super::Columns[L"category"];
        this->columntest_Id = __super::Columns[L"test_Id"];
        this->column_mark_expected_failures_Id = __super::Columns[L"mark-expected-failures_Id"];
        this->columnlibrary_Id = __super::Columns[L"library_Id"];
    }
    
    inline ::System::Void NewDataSet::testDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columncategory = (gcnew ::System::Data::DataColumn(L"category", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncategory);
        this->columntest_Id = (gcnew ::System::Data::DataColumn(L"test_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntest_Id);
        this->column_mark_expected_failures_Id = (gcnew ::System::Data::DataColumn(L"mark-expected-failures_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_expected_failures_Id);
        this->columnlibrary_Id = (gcnew ::System::Data::DataColumn(L"library_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlibrary_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columntest_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columncategory->Namespace = L"";
        this->columntest_Id->AutoIncrement = true;
        this->columntest_Id->AllowDBNull = false;
        this->columntest_Id->Unique = true;
    }
    
    inline GameServer::NewDataSet::testRow^  NewDataSet::testDataTable::NewtestRow() {
        return (cli::safe_cast<GameServer::NewDataSet::testRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::testDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::testRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::testDataTable::GetRowType() {
        return GameServer::NewDataSet::testRow::typeid;
    }
    
    inline ::System::Void NewDataSet::testDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->testRowChanged(this, (gcnew GameServer::NewDataSet::testRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::testRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::testDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->testRowChanging(this, (gcnew GameServer::NewDataSet::testRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::testRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::testDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->testRowDeleted(this, (gcnew GameServer::NewDataSet::testRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::testRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::testDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->testRowDeleting(this, (gcnew GameServer::NewDataSet::testRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::testRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::testDataTable::RemovetestRow(GameServer::NewDataSet::testRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::testDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"testDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_mark_failureDataTable::_mark_failureDataTable() {
        this->TableName = L"mark-failure";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::_mark_failureDataTable::_mark_failureDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::_mark_failureDataTable::_mark_failureDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_failureDataTable::_mark_failure_IdColumn::get() {
        return this->column_mark_failure_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_failureDataTable::test_IdColumn::get() {
        return this->columntest_Id;
    }
    
    inline ::System::Int32 NewDataSet::_mark_failureDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::_mark_failureRow^  NewDataSet::_mark_failureDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::_mark_failureDataTable::Add_mark_failureRow(GameServer::NewDataSet::_mark_failureRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::_mark_failureRow^  NewDataSet::_mark_failureDataTable::Add_mark_failureRow(GameServer::NewDataSet::testRow^  _parenttestRowBytest_mark_failure) {
        GameServer::NewDataSet::_mark_failureRow^  row_mark_failureRow = (cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (_parenttestRowBytest_mark_failure != nullptr) {
            columnValuesArray[1] = _parenttestRowBytest_mark_failure[2];
        }
        row_mark_failureRow->ItemArray = columnValuesArray;
        this->Rows->Add(row_mark_failureRow);
        return row_mark_failureRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::_mark_failureDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_mark_failureDataTable::Clone() {
        GameServer::NewDataSet::_mark_failureDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::_mark_failureDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_mark_failureDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::_mark_failureDataTable());
    }
    
    inline ::System::Void NewDataSet::_mark_failureDataTable::InitVars() {
        this->column_mark_failure_Id = __super::Columns[L"mark-failure_Id"];
        this->columntest_Id = __super::Columns[L"test_Id"];
    }
    
    inline ::System::Void NewDataSet::_mark_failureDataTable::InitClass() {
        this->column_mark_failure_Id = (gcnew ::System::Data::DataColumn(L"mark-failure_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_failure_Id);
        this->columntest_Id = (gcnew ::System::Data::DataColumn(L"test_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntest_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_mark_failure_Id}, 
                true)));
        this->column_mark_failure_Id->AutoIncrement = true;
        this->column_mark_failure_Id->AllowDBNull = false;
        this->column_mark_failure_Id->Unique = true;
    }
    
    inline GameServer::NewDataSet::_mark_failureRow^  NewDataSet::_mark_failureDataTable::New_mark_failureRow() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::_mark_failureDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::_mark_failureRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::_mark_failureDataTable::GetRowType() {
        return GameServer::NewDataSet::_mark_failureRow::typeid;
    }
    
    inline ::System::Void NewDataSet::_mark_failureDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->_mark_failureRowChanged(this, (gcnew GameServer::NewDataSet::_mark_failureRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_failureDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->_mark_failureRowChanging(this, (gcnew GameServer::NewDataSet::_mark_failureRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_failureDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->_mark_failureRowDeleted(this, (gcnew GameServer::NewDataSet::_mark_failureRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_failureDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->_mark_failureRowDeleting(this, (gcnew GameServer::NewDataSet::_mark_failureRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_failureDataTable::Remove_mark_failureRow(GameServer::NewDataSet::_mark_failureRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_mark_failureDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"_mark_failureDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_mark_expected_failuresDataTable::_mark_expected_failuresDataTable() {
        this->TableName = L"mark-expected-failures";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::_mark_expected_failuresDataTable::_mark_expected_failuresDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::_mark_expected_failuresDataTable::_mark_expected_failuresDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_expected_failuresDataTable::reasonColumn::get() {
        return this->columnreason;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_expected_failuresDataTable::_mark_expected_failures_IdColumn::get() {
        return this->column_mark_expected_failures_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_mark_expected_failuresDataTable::library_IdColumn::get() {
        return this->columnlibrary_Id;
    }
    
    inline ::System::Int32 NewDataSet::_mark_expected_failuresDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline GameServer::NewDataSet::_mark_expected_failuresRow^  NewDataSet::_mark_expected_failuresDataTable::default::get(
                ::System::Int32 index) {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresDataTable::Add_mark_expected_failuresRow(GameServer::NewDataSet::_mark_expected_failuresRow^  row) {
        this->Rows->Add(row);
    }
    
    inline GameServer::NewDataSet::_mark_expected_failuresRow^  NewDataSet::_mark_expected_failuresDataTable::Add_mark_expected_failuresRow(
                System::String^  reason, GameServer::NewDataSet::libraryRow^  _parentlibraryRowBylibrary_mark_expected_failures) {
        GameServer::NewDataSet::_mark_expected_failuresRow^  row_mark_expected_failuresRow = (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {reason, nullptr, nullptr};
        if (_parentlibraryRowBylibrary_mark_expected_failures != nullptr) {
            columnValuesArray[2] = _parentlibraryRowBylibrary_mark_expected_failures[1];
        }
        row_mark_expected_failuresRow->ItemArray = columnValuesArray;
        this->Rows->Add(row_mark_expected_failuresRow);
        return row_mark_expected_failuresRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::_mark_expected_failuresDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_mark_expected_failuresDataTable::Clone() {
        GameServer::NewDataSet::_mark_expected_failuresDataTable^  cln = (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_mark_expected_failuresDataTable::CreateInstance() {
        return (gcnew GameServer::NewDataSet::_mark_expected_failuresDataTable());
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresDataTable::InitVars() {
        this->columnreason = __super::Columns[L"reason"];
        this->column_mark_expected_failures_Id = __super::Columns[L"mark-expected-failures_Id"];
        this->columnlibrary_Id = __super::Columns[L"library_Id"];
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresDataTable::InitClass() {
        this->columnreason = (gcnew ::System::Data::DataColumn(L"reason", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnreason);
        this->column_mark_expected_failures_Id = (gcnew ::System::Data::DataColumn(L"mark-expected-failures_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->column_mark_expected_failures_Id);
        this->columnlibrary_Id = (gcnew ::System::Data::DataColumn(L"library_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlibrary_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_mark_expected_failures_Id}, 
                true)));
        this->columnreason->Namespace = L"";
        this->column_mark_expected_failures_Id->AutoIncrement = true;
        this->column_mark_expected_failures_Id->AllowDBNull = false;
        this->column_mark_expected_failures_Id->Unique = true;
    }
    
    inline GameServer::NewDataSet::_mark_expected_failuresRow^  NewDataSet::_mark_expected_failuresDataTable::New_mark_expected_failuresRow() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::_mark_expected_failuresDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew GameServer::NewDataSet::_mark_expected_failuresRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::_mark_expected_failuresDataTable::GetRowType() {
        return GameServer::NewDataSet::_mark_expected_failuresRow::typeid;
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->_mark_expected_failuresRowChanged(this, (gcnew GameServer::NewDataSet::_mark_expected_failuresRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->_mark_expected_failuresRowChanging(this, (gcnew GameServer::NewDataSet::_mark_expected_failuresRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->_mark_expected_failuresRowDeleted(this, (gcnew GameServer::NewDataSet::_mark_expected_failuresRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->_mark_expected_failuresRowDeleting(this, (gcnew GameServer::NewDataSet::_mark_expected_failuresRowChangeEvent((cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresDataTable::Remove_mark_expected_failuresRow(GameServer::NewDataSet::_mark_expected_failuresRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_mark_expected_failuresDataTable::GetTypedTableSchema(
                ::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        GameServer::NewDataSet^  ds = (gcnew GameServer::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"_mark_expected_failuresDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_explicit_failures_markupRow::_explicit_failures_markupRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->table_explicit_failures_markup = (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::_explicit_failures_markupRow::_explicit_failures_markup_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->table_explicit_failures_markup->_explicit_failures_markup_IdColumn]));
    }
    inline System::Void NewDataSet::_explicit_failures_markupRow::_explicit_failures_markup_Id::set(System::Int32 value) {
        this[this->table_explicit_failures_markup->_explicit_failures_markup_IdColumn] = value;
    }
    
    inline cli::array< GameServer::NewDataSet::_mark_toolsetRow^  >^  NewDataSet::_explicit_failures_markupRow::_Getmark_toolsetRows() {
        if (this->Table->ChildRelations[L"explicit-failures-markup_mark-toolset"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::_mark_toolsetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::_mark_toolsetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"explicit-failures-markup_mark-toolset"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::libraryRow^  >^  NewDataSet::_explicit_failures_markupRow::GetlibraryRows() {
        if (this->Table->ChildRelations[L"explicit-failures-markup_library"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::libraryRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::libraryRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"explicit-failures-markup_library"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::noteRow^  >^  NewDataSet::_explicit_failures_markupRow::GetnoteRows() {
        if (this->Table->ChildRelations[L"explicit-failures-markup_note"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::noteRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::noteRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"explicit-failures-markup_note"])));
        }
    }
    
    
    inline NewDataSet::_mark_toolsetRow::_mark_toolsetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->table_mark_toolset = (cli::safe_cast<GameServer::NewDataSet::_mark_toolsetDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::_mark_toolsetRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->table_mark_toolset->nameColumn]));
    }
    inline System::Void NewDataSet::_mark_toolsetRow::name::set(System::String^  value) {
        this[this->table_mark_toolset->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::_mark_toolsetRow::status::get() {
        return (cli::safe_cast<::System::String^  >(this[this->table_mark_toolset->statusColumn]));
    }
    inline System::Void NewDataSet::_mark_toolsetRow::status::set(System::String^  value) {
        this[this->table_mark_toolset->statusColumn] = value;
    }
    
    inline System::String^  NewDataSet::_mark_toolsetRow::title::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->table_mark_toolset->titleColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'title\' in table \'mark-toolset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_mark_toolsetRow::title::set(System::String^  value) {
        this[this->table_mark_toolset->titleColumn] = value;
    }
    
    inline System::String^  NewDataSet::_mark_toolsetRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->table_mark_toolset->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'mark-toolset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_mark_toolsetRow::description::set(System::String^  value) {
        this[this->table_mark_toolset->descriptionColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_mark_toolsetRow::_explicit_failures_markup_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->table_mark_toolset->_explicit_failures_markup_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'explicit-failures-markup_Id\' in table \'mark-toolset\' is DBN" 
L"ull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_mark_toolsetRow::_explicit_failures_markup_Id::set(System::Int32 value) {
        this[this->table_mark_toolset->_explicit_failures_markup_IdColumn] = value;
    }
    
    inline GameServer::NewDataSet::_explicit_failures_markupRow^  NewDataSet::_mark_toolsetRow::_explicit_failures_markupRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(this->GetParentRow(this->Table->ParentRelations[L"explicit-failures-markup_mark-toolset"])));
    }
    inline System::Void NewDataSet::_mark_toolsetRow::_explicit_failures_markupRow::set(GameServer::NewDataSet::_explicit_failures_markupRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"explicit-failures-markup_mark-toolset"]);
    }
    
    inline ::System::Boolean NewDataSet::_mark_toolsetRow::IstitleNull() {
        return this->IsNull(this->table_mark_toolset->titleColumn);
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetRow::SettitleNull() {
        this[this->table_mark_toolset->titleColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::_mark_toolsetRow::IsdescriptionNull() {
        return this->IsNull(this->table_mark_toolset->descriptionColumn);
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetRow::SetdescriptionNull() {
        this[this->table_mark_toolset->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::_mark_toolsetRow::Is_explicit_failures_markup_IdNull() {
        return this->IsNull(this->table_mark_toolset->_explicit_failures_markup_IdColumn);
    }
    
    inline ::System::Void NewDataSet::_mark_toolsetRow::Set_explicit_failures_markup_IdNull() {
        this[this->table_mark_toolset->_explicit_failures_markup_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::libraryRow::libraryRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablelibrary = (cli::safe_cast<GameServer::NewDataSet::libraryDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::libraryRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablelibrary->nameColumn]));
    }
    inline System::Void NewDataSet::libraryRow::name::set(System::String^  value) {
        this[this->tablelibrary->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::libraryRow::library_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablelibrary->library_IdColumn]));
    }
    inline System::Void NewDataSet::libraryRow::library_Id::set(System::Int32 value) {
        this[this->tablelibrary->library_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::libraryRow::_explicit_failures_markup_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablelibrary->_explicit_failures_markup_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'explicit-failures-markup_Id\' in table \'library\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::libraryRow::_explicit_failures_markup_Id::set(System::Int32 value) {
        this[this->tablelibrary->_explicit_failures_markup_IdColumn] = value;
    }
    
    inline GameServer::NewDataSet::_explicit_failures_markupRow^  NewDataSet::libraryRow::_explicit_failures_markupRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(this->GetParentRow(this->Table->ParentRelations[L"explicit-failures-markup_library"])));
    }
    inline System::Void NewDataSet::libraryRow::_explicit_failures_markupRow::set(GameServer::NewDataSet::_explicit_failures_markupRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"explicit-failures-markup_library"]);
    }
    
    inline ::System::Boolean NewDataSet::libraryRow::Is_explicit_failures_markup_IdNull() {
        return this->IsNull(this->tablelibrary->_explicit_failures_markup_IdColumn);
    }
    
    inline ::System::Void NewDataSet::libraryRow::Set_explicit_failures_markup_IdNull() {
        this[this->tablelibrary->_explicit_failures_markup_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< GameServer::NewDataSet::_mark_unusableRow^  >^  NewDataSet::libraryRow::_Getmark_unusableRows() {
        if (this->Table->ChildRelations[L"library_mark-unusable"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::_mark_unusableRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::_mark_unusableRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"library_mark-unusable"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::testRow^  >^  NewDataSet::libraryRow::GettestRows() {
        if (this->Table->ChildRelations[L"library_test"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::testRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::testRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"library_test"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::_mark_expected_failuresRow^  >^  NewDataSet::libraryRow::_Getmark_expected_failuresRows() {
        if (this->Table->ChildRelations[L"library_mark-expected-failures"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::_mark_expected_failuresRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::_mark_expected_failuresRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"library_mark-expected-failures"])));
        }
    }
    
    
    inline NewDataSet::_mark_unusableRow::_mark_unusableRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->table_mark_unusable = (cli::safe_cast<GameServer::NewDataSet::_mark_unusableDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::_mark_unusableRow::_mark_unusable_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->table_mark_unusable->_mark_unusable_IdColumn]));
    }
    inline System::Void NewDataSet::_mark_unusableRow::_mark_unusable_Id::set(System::Int32 value) {
        this[this->table_mark_unusable->_mark_unusable_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_mark_unusableRow::library_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->table_mark_unusable->library_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'library_Id\' in table \'mark-unusable\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_mark_unusableRow::library_Id::set(System::Int32 value) {
        this[this->table_mark_unusable->library_IdColumn] = value;
    }
    
    inline GameServer::NewDataSet::libraryRow^  NewDataSet::_mark_unusableRow::libraryRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(this->GetParentRow(this->Table->ParentRelations[L"library_mark-unusable"])));
    }
    inline System::Void NewDataSet::_mark_unusableRow::libraryRow::set(GameServer::NewDataSet::libraryRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"library_mark-unusable"]);
    }
    
    inline ::System::Boolean NewDataSet::_mark_unusableRow::Islibrary_IdNull() {
        return this->IsNull(this->table_mark_unusable->library_IdColumn);
    }
    
    inline ::System::Void NewDataSet::_mark_unusableRow::Setlibrary_IdNull() {
        this[this->table_mark_unusable->library_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< GameServer::NewDataSet::toolsetRow^  >^  NewDataSet::_mark_unusableRow::GettoolsetRows() {
        if (this->Table->ChildRelations[L"mark-unusable_toolset"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::toolsetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::toolsetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"mark-unusable_toolset"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::noteRow^  >^  NewDataSet::_mark_unusableRow::GetnoteRows() {
        if (this->Table->ChildRelations[L"mark-unusable_note"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::noteRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::noteRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"mark-unusable_note"])));
        }
    }
    
    
    inline NewDataSet::toolsetRow::toolsetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabletoolset = (cli::safe_cast<GameServer::NewDataSet::toolsetDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::toolsetRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tabletoolset->nameColumn]));
    }
    inline System::Void NewDataSet::toolsetRow::name::set(System::String^  value) {
        this[this->tabletoolset->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::toolsetRow::_mark_unusable_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletoolset->_mark_unusable_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mark-unusable_Id\' in table \'toolset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::toolsetRow::_mark_unusable_Id::set(System::Int32 value) {
        this[this->tabletoolset->_mark_unusable_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::toolsetRow::_mark_failure_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletoolset->_mark_failure_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mark-failure_Id\' in table \'toolset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::toolsetRow::_mark_failure_Id::set(System::Int32 value) {
        this[this->tabletoolset->_mark_failure_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::toolsetRow::test_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletoolset->test_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'test_Id\' in table \'toolset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::toolsetRow::test_Id::set(System::Int32 value) {
        this[this->tabletoolset->test_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::toolsetRow::_mark_expected_failures_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletoolset->_mark_expected_failures_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mark-expected-failures_Id\' in table \'toolset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::toolsetRow::_mark_expected_failures_Id::set(System::Int32 value) {
        this[this->tabletoolset->_mark_expected_failures_IdColumn] = value;
    }
    
    inline GameServer::NewDataSet::_mark_unusableRow^  NewDataSet::toolsetRow::_mark_unusableRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(this->GetParentRow(this->Table->ParentRelations[L"mark-unusable_toolset"])));
    }
    inline System::Void NewDataSet::toolsetRow::_mark_unusableRow::set(GameServer::NewDataSet::_mark_unusableRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"mark-unusable_toolset"]);
    }
    
    inline GameServer::NewDataSet::_mark_failureRow^  NewDataSet::toolsetRow::_mark_failureRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(this->GetParentRow(this->Table->ParentRelations[L"mark-failure_toolset"])));
    }
    inline System::Void NewDataSet::toolsetRow::_mark_failureRow::set(GameServer::NewDataSet::_mark_failureRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"mark-failure_toolset"]);
    }
    
    inline GameServer::NewDataSet::testRow^  NewDataSet::toolsetRow::testRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::testRow^  >(this->GetParentRow(this->Table->ParentRelations[L"test_toolset"])));
    }
    inline System::Void NewDataSet::toolsetRow::testRow::set(GameServer::NewDataSet::testRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"test_toolset"]);
    }
    
    inline GameServer::NewDataSet::_mark_expected_failuresRow^  NewDataSet::toolsetRow::_mark_expected_failuresRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(this->GetParentRow(this->Table->ParentRelations[L"mark-expected-failures_toolset"])));
    }
    inline System::Void NewDataSet::toolsetRow::_mark_expected_failuresRow::set(GameServer::NewDataSet::_mark_expected_failuresRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"mark-expected-failures_toolset"]);
    }
    
    inline ::System::Boolean NewDataSet::toolsetRow::Is_mark_unusable_IdNull() {
        return this->IsNull(this->tabletoolset->_mark_unusable_IdColumn);
    }
    
    inline ::System::Void NewDataSet::toolsetRow::Set_mark_unusable_IdNull() {
        this[this->tabletoolset->_mark_unusable_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::toolsetRow::Is_mark_failure_IdNull() {
        return this->IsNull(this->tabletoolset->_mark_failure_IdColumn);
    }
    
    inline ::System::Void NewDataSet::toolsetRow::Set_mark_failure_IdNull() {
        this[this->tabletoolset->_mark_failure_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::toolsetRow::Istest_IdNull() {
        return this->IsNull(this->tabletoolset->test_IdColumn);
    }
    
    inline ::System::Void NewDataSet::toolsetRow::Settest_IdNull() {
        this[this->tabletoolset->test_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::toolsetRow::Is_mark_expected_failures_IdNull() {
        return this->IsNull(this->tabletoolset->_mark_expected_failures_IdColumn);
    }
    
    inline ::System::Void NewDataSet::toolsetRow::Set_mark_expected_failures_IdNull() {
        this[this->tabletoolset->_mark_expected_failures_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::noteRow::noteRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablenote = (cli::safe_cast<GameServer::NewDataSet::noteDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::noteRow::refid::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablenote->refidColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'refid\' in table \'note\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::noteRow::refid::set(System::String^  value) {
        this[this->tablenote->refidColumn] = value;
    }
    
    inline System::String^  NewDataSet::noteRow::author::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablenote->authorColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'author\' in table \'note\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::noteRow::author::set(System::String^  value) {
        this[this->tablenote->authorColumn] = value;
    }
    
    inline System::String^  NewDataSet::noteRow::date::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablenote->dateColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'date\' in table \'note\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::noteRow::date::set(System::String^  value) {
        this[this->tablenote->dateColumn] = value;
    }
    
    inline System::String^  NewDataSet::noteRow::id::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablenote->idColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'id\' in table \'note\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::noteRow::id::set(System::String^  value) {
        this[this->tablenote->idColumn] = value;
    }
    
    inline System::Int32 NewDataSet::noteRow::_mark_unusable_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablenote->_mark_unusable_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mark-unusable_Id\' in table \'note\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::noteRow::_mark_unusable_Id::set(System::Int32 value) {
        this[this->tablenote->_mark_unusable_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::noteRow::_mark_failure_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablenote->_mark_failure_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mark-failure_Id\' in table \'note\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::noteRow::_mark_failure_Id::set(System::Int32 value) {
        this[this->tablenote->_mark_failure_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::noteRow::test_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablenote->test_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'test_Id\' in table \'note\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::noteRow::test_Id::set(System::Int32 value) {
        this[this->tablenote->test_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::noteRow::_mark_expected_failures_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablenote->_mark_expected_failures_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mark-expected-failures_Id\' in table \'note\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::noteRow::_mark_expected_failures_Id::set(System::Int32 value) {
        this[this->tablenote->_mark_expected_failures_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::noteRow::_explicit_failures_markup_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablenote->_explicit_failures_markup_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'explicit-failures-markup_Id\' in table \'note\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::noteRow::_explicit_failures_markup_Id::set(System::Int32 value) {
        this[this->tablenote->_explicit_failures_markup_IdColumn] = value;
    }
    
    inline GameServer::NewDataSet::_mark_unusableRow^  NewDataSet::noteRow::_mark_unusableRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_unusableRow^  >(this->GetParentRow(this->Table->ParentRelations[L"mark-unusable_note"])));
    }
    inline System::Void NewDataSet::noteRow::_mark_unusableRow::set(GameServer::NewDataSet::_mark_unusableRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"mark-unusable_note"]);
    }
    
    inline GameServer::NewDataSet::_mark_failureRow^  NewDataSet::noteRow::_mark_failureRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_failureRow^  >(this->GetParentRow(this->Table->ParentRelations[L"mark-failure_note"])));
    }
    inline System::Void NewDataSet::noteRow::_mark_failureRow::set(GameServer::NewDataSet::_mark_failureRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"mark-failure_note"]);
    }
    
    inline GameServer::NewDataSet::testRow^  NewDataSet::noteRow::testRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::testRow^  >(this->GetParentRow(this->Table->ParentRelations[L"test_note"])));
    }
    inline System::Void NewDataSet::noteRow::testRow::set(GameServer::NewDataSet::testRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"test_note"]);
    }
    
    inline GameServer::NewDataSet::_mark_expected_failuresRow^  NewDataSet::noteRow::_mark_expected_failuresRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(this->GetParentRow(this->Table->ParentRelations[L"mark-expected-failures_note"])));
    }
    inline System::Void NewDataSet::noteRow::_mark_expected_failuresRow::set(GameServer::NewDataSet::_mark_expected_failuresRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"mark-expected-failures_note"]);
    }
    
    inline GameServer::NewDataSet::_explicit_failures_markupRow^  NewDataSet::noteRow::_explicit_failures_markupRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_explicit_failures_markupRow^  >(this->GetParentRow(this->Table->ParentRelations[L"explicit-failures-markup_note"])));
    }
    inline System::Void NewDataSet::noteRow::_explicit_failures_markupRow::set(GameServer::NewDataSet::_explicit_failures_markupRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"explicit-failures-markup_note"]);
    }
    
    inline ::System::Boolean NewDataSet::noteRow::IsrefidNull() {
        return this->IsNull(this->tablenote->refidColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::SetrefidNull() {
        this[this->tablenote->refidColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::noteRow::IsauthorNull() {
        return this->IsNull(this->tablenote->authorColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::SetauthorNull() {
        this[this->tablenote->authorColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::noteRow::IsdateNull() {
        return this->IsNull(this->tablenote->dateColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::SetdateNull() {
        this[this->tablenote->dateColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::noteRow::IsidNull() {
        return this->IsNull(this->tablenote->idColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::SetidNull() {
        this[this->tablenote->idColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::noteRow::Is_mark_unusable_IdNull() {
        return this->IsNull(this->tablenote->_mark_unusable_IdColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::Set_mark_unusable_IdNull() {
        this[this->tablenote->_mark_unusable_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::noteRow::Is_mark_failure_IdNull() {
        return this->IsNull(this->tablenote->_mark_failure_IdColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::Set_mark_failure_IdNull() {
        this[this->tablenote->_mark_failure_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::noteRow::Istest_IdNull() {
        return this->IsNull(this->tablenote->test_IdColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::Settest_IdNull() {
        this[this->tablenote->test_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::noteRow::Is_mark_expected_failures_IdNull() {
        return this->IsNull(this->tablenote->_mark_expected_failures_IdColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::Set_mark_expected_failures_IdNull() {
        this[this->tablenote->_mark_expected_failures_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::noteRow::Is_explicit_failures_markup_IdNull() {
        return this->IsNull(this->tablenote->_explicit_failures_markup_IdColumn);
    }
    
    inline ::System::Void NewDataSet::noteRow::Set_explicit_failures_markup_IdNull() {
        this[this->tablenote->_explicit_failures_markup_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::testRow::testRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabletest = (cli::safe_cast<GameServer::NewDataSet::testDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::testRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tabletest->nameColumn]));
    }
    inline System::Void NewDataSet::testRow::name::set(System::String^  value) {
        this[this->tabletest->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::testRow::category::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletest->categoryColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'category\' in table \'test\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::testRow::category::set(System::String^  value) {
        this[this->tabletest->categoryColumn] = value;
    }
    
    inline System::Int32 NewDataSet::testRow::test_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tabletest->test_IdColumn]));
    }
    inline System::Void NewDataSet::testRow::test_Id::set(System::Int32 value) {
        this[this->tabletest->test_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::testRow::_mark_expected_failures_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletest->_mark_expected_failures_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mark-expected-failures_Id\' in table \'test\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::testRow::_mark_expected_failures_Id::set(System::Int32 value) {
        this[this->tabletest->_mark_expected_failures_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::testRow::library_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletest->library_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'library_Id\' in table \'test\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::testRow::library_Id::set(System::Int32 value) {
        this[this->tabletest->library_IdColumn] = value;
    }
    
    inline GameServer::NewDataSet::_mark_expected_failuresRow^  NewDataSet::testRow::_mark_expected_failuresRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresRow^  >(this->GetParentRow(this->Table->ParentRelations[L"mark-expected-failures_test"])));
    }
    inline System::Void NewDataSet::testRow::_mark_expected_failuresRow::set(GameServer::NewDataSet::_mark_expected_failuresRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"mark-expected-failures_test"]);
    }
    
    inline GameServer::NewDataSet::libraryRow^  NewDataSet::testRow::libraryRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(this->GetParentRow(this->Table->ParentRelations[L"library_test"])));
    }
    inline System::Void NewDataSet::testRow::libraryRow::set(GameServer::NewDataSet::libraryRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"library_test"]);
    }
    
    inline ::System::Boolean NewDataSet::testRow::IscategoryNull() {
        return this->IsNull(this->tabletest->categoryColumn);
    }
    
    inline ::System::Void NewDataSet::testRow::SetcategoryNull() {
        this[this->tabletest->categoryColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::testRow::Is_mark_expected_failures_IdNull() {
        return this->IsNull(this->tabletest->_mark_expected_failures_IdColumn);
    }
    
    inline ::System::Void NewDataSet::testRow::Set_mark_expected_failures_IdNull() {
        this[this->tabletest->_mark_expected_failures_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::testRow::Islibrary_IdNull() {
        return this->IsNull(this->tabletest->library_IdColumn);
    }
    
    inline ::System::Void NewDataSet::testRow::Setlibrary_IdNull() {
        this[this->tabletest->library_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< GameServer::NewDataSet::_mark_failureRow^  >^  NewDataSet::testRow::_Getmark_failureRows() {
        if (this->Table->ChildRelations[L"test_mark-failure"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::_mark_failureRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::_mark_failureRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"test_mark-failure"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::toolsetRow^  >^  NewDataSet::testRow::GettoolsetRows() {
        if (this->Table->ChildRelations[L"test_toolset"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::toolsetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::toolsetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"test_toolset"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::noteRow^  >^  NewDataSet::testRow::GetnoteRows() {
        if (this->Table->ChildRelations[L"test_note"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::noteRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::noteRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"test_note"])));
        }
    }
    
    
    inline NewDataSet::_mark_failureRow::_mark_failureRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->table_mark_failure = (cli::safe_cast<GameServer::NewDataSet::_mark_failureDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::_mark_failureRow::_mark_failure_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->table_mark_failure->_mark_failure_IdColumn]));
    }
    inline System::Void NewDataSet::_mark_failureRow::_mark_failure_Id::set(System::Int32 value) {
        this[this->table_mark_failure->_mark_failure_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_mark_failureRow::test_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->table_mark_failure->test_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'test_Id\' in table \'mark-failure\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_mark_failureRow::test_Id::set(System::Int32 value) {
        this[this->table_mark_failure->test_IdColumn] = value;
    }
    
    inline GameServer::NewDataSet::testRow^  NewDataSet::_mark_failureRow::testRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::testRow^  >(this->GetParentRow(this->Table->ParentRelations[L"test_mark-failure"])));
    }
    inline System::Void NewDataSet::_mark_failureRow::testRow::set(GameServer::NewDataSet::testRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"test_mark-failure"]);
    }
    
    inline ::System::Boolean NewDataSet::_mark_failureRow::Istest_IdNull() {
        return this->IsNull(this->table_mark_failure->test_IdColumn);
    }
    
    inline ::System::Void NewDataSet::_mark_failureRow::Settest_IdNull() {
        this[this->table_mark_failure->test_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< GameServer::NewDataSet::toolsetRow^  >^  NewDataSet::_mark_failureRow::GettoolsetRows() {
        if (this->Table->ChildRelations[L"mark-failure_toolset"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::toolsetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::toolsetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"mark-failure_toolset"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::noteRow^  >^  NewDataSet::_mark_failureRow::GetnoteRows() {
        if (this->Table->ChildRelations[L"mark-failure_note"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::noteRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::noteRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"mark-failure_note"])));
        }
    }
    
    
    inline NewDataSet::_mark_expected_failuresRow::_mark_expected_failuresRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->table_mark_expected_failures = (cli::safe_cast<GameServer::NewDataSet::_mark_expected_failuresDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::_mark_expected_failuresRow::reason::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->table_mark_expected_failures->reasonColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'reason\' in table \'mark-expected-failures\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_mark_expected_failuresRow::reason::set(System::String^  value) {
        this[this->table_mark_expected_failures->reasonColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_mark_expected_failuresRow::_mark_expected_failures_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->table_mark_expected_failures->_mark_expected_failures_IdColumn]));
    }
    inline System::Void NewDataSet::_mark_expected_failuresRow::_mark_expected_failures_Id::set(System::Int32 value) {
        this[this->table_mark_expected_failures->_mark_expected_failures_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_mark_expected_failuresRow::library_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->table_mark_expected_failures->library_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'library_Id\' in table \'mark-expected-failures\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_mark_expected_failuresRow::library_Id::set(System::Int32 value) {
        this[this->table_mark_expected_failures->library_IdColumn] = value;
    }
    
    inline GameServer::NewDataSet::libraryRow^  NewDataSet::_mark_expected_failuresRow::libraryRow::get() {
        return (cli::safe_cast<GameServer::NewDataSet::libraryRow^  >(this->GetParentRow(this->Table->ParentRelations[L"library_mark-expected-failures"])));
    }
    inline System::Void NewDataSet::_mark_expected_failuresRow::libraryRow::set(GameServer::NewDataSet::libraryRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"library_mark-expected-failures"]);
    }
    
    inline ::System::Boolean NewDataSet::_mark_expected_failuresRow::IsreasonNull() {
        return this->IsNull(this->table_mark_expected_failures->reasonColumn);
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresRow::SetreasonNull() {
        this[this->table_mark_expected_failures->reasonColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::_mark_expected_failuresRow::Islibrary_IdNull() {
        return this->IsNull(this->table_mark_expected_failures->library_IdColumn);
    }
    
    inline ::System::Void NewDataSet::_mark_expected_failuresRow::Setlibrary_IdNull() {
        this[this->table_mark_expected_failures->library_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< GameServer::NewDataSet::testRow^  >^  NewDataSet::_mark_expected_failuresRow::GettestRows() {
        if (this->Table->ChildRelations[L"mark-expected-failures_test"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::testRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::testRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"mark-expected-failures_test"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::toolsetRow^  >^  NewDataSet::_mark_expected_failuresRow::GettoolsetRows() {
        if (this->Table->ChildRelations[L"mark-expected-failures_toolset"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::toolsetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::toolsetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"mark-expected-failures_toolset"])));
        }
    }
    
    inline cli::array< GameServer::NewDataSet::noteRow^  >^  NewDataSet::_mark_expected_failuresRow::GetnoteRows() {
        if (this->Table->ChildRelations[L"mark-expected-failures_note"] == nullptr) {
            return gcnew cli::array< GameServer::NewDataSet::noteRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< GameServer::NewDataSet::noteRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"mark-expected-failures_note"])));
        }
    }
    
    
    inline NewDataSet::_explicit_failures_markupRowChangeEvent::_explicit_failures_markupRowChangeEvent(GameServer::NewDataSet::_explicit_failures_markupRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::_explicit_failures_markupRow^  NewDataSet::_explicit_failures_markupRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::_explicit_failures_markupRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::_mark_toolsetRowChangeEvent::_mark_toolsetRowChangeEvent(GameServer::NewDataSet::_mark_toolsetRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::_mark_toolsetRow^  NewDataSet::_mark_toolsetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::_mark_toolsetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::libraryRowChangeEvent::libraryRowChangeEvent(GameServer::NewDataSet::libraryRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::libraryRow^  NewDataSet::libraryRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::libraryRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::_mark_unusableRowChangeEvent::_mark_unusableRowChangeEvent(GameServer::NewDataSet::_mark_unusableRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::_mark_unusableRow^  NewDataSet::_mark_unusableRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::_mark_unusableRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::toolsetRowChangeEvent::toolsetRowChangeEvent(GameServer::NewDataSet::toolsetRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::toolsetRow^  NewDataSet::toolsetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::toolsetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::noteRowChangeEvent::noteRowChangeEvent(GameServer::NewDataSet::noteRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::noteRow^  NewDataSet::noteRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::noteRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::testRowChangeEvent::testRowChangeEvent(GameServer::NewDataSet::testRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::testRow^  NewDataSet::testRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::testRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::_mark_failureRowChangeEvent::_mark_failureRowChangeEvent(GameServer::NewDataSet::_mark_failureRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::_mark_failureRow^  NewDataSet::_mark_failureRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::_mark_failureRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::_mark_expected_failuresRowChangeEvent::_mark_expected_failuresRowChangeEvent(GameServer::NewDataSet::_mark_expected_failuresRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline GameServer::NewDataSet::_mark_expected_failuresRow^  NewDataSet::_mark_expected_failuresRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::_mark_expected_failuresRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
